<?php

define('BATIRE_DATABASE_PURGE_NODES_AT_A_TIME', 500);

/**
 * Implementation of hook_menu().
 */
function batire_database_purge_menu() {
  return array(
    'admin/batire-site/settings/purge' => array(
      'title' => 'Database purge',
      'page callback' => 'batire_database_purge_select',
      'page arguments' => array(),
      'type' => MENU_LOCAL_TASK,
      'access arguments' => array('administer batire configuration'),
    ),
    'admin/batire-site/settings/purge/start/%' => array(
      'title' => 'Database purge process',
      'page callback' => 'batire_database_purge_start',
      'page arguments' => array(5),
      'type' => MENU_CALLBACK,
      'access arguments' => array('administer batire configuration'),
    ),
  );
}

/**
 * Initial import handlers
 */

function batire_database_purge_select() {
  $types = array(
    'users' => 'Delete users data',
    'docs' => 'Delete documents data',
    'all' => 'Delete all data',
  );
  $links = array();
  foreach ($types as $key => $type) {
    $links[] = array('data' => l($type, 'admin/batire-site/settings/purge/start/'. $key));
  }
  return theme('item_list', $links);
}

/**
 * Batch callback; deletion finished.
 */
function batire_database_purge_purge_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(
      t(
        'Data was successfully purged in !sec seconds',
        array('!sec' => time() - variable_get('batire_database_purge_time_start', 0))
      )
    );
  }
  else {
    drupal_set_message(t('The data was not successfully purged.'), 'error');
  }

  /**
   * Now we need to clear all cache;
   */
  module_load_include('inc', 'system', 'system.admin');
  $form = $form_state = array();
  system_clear_cache_submit($form, $form_state);

  variable_del('batire_database_purge_time_start');
}

/**
 * Batch callback;
 */
function batire_database_purge_start($type) {
  if (isset($type) && $type) {
    if ($type == 'users' || $type == 'docs' || $type == 'all') {
      variable_set('batire_database_purge_time_start', time());
      switch ($type) {
        case 'users' :
          $batch = array(
            'operations' => array(),
            'finished' => 'batire_database_purge_purge_batch_finished',
            'title' => t('Purging all user related data')
          );

          batire_database_purge_users($batch);
          break;
        case 'docs' :
          $batch = array(
            'operations' => array(),
            'finished' => 'batire_database_purge_purge_batch_finished',
            'title' => t('Purging all documents related data')
          );

          batire_database_purge_docs($batch);
          break;
        case 'all' :
          $batch = array(
            'operations' => array(),
            'finished' => 'batire_database_purge_purge_batch_finished',
            'title' => t('Purging all data')
          );

          batire_database_purge_users($batch);
          batire_database_purge_docs($batch);
          break;
      }
      batch_set($batch);
      batch_process('admin/batire-site/settings/purge');
    }
  }
}

function batire_database_purge_users(&$batch) {
  /**
   * 1. Deleting folders annotations, alerts, sent alerts, saved searches
   */
  $types = array(
    'batire_user_folder',
    'batire_user_annotation',
    'batire_user_search_profile',
    'batire_user_sent_alert',
  );

  foreach ($types as $type) {
    $batch['operations'][] = array('_batire_database_purge_delete_node_by_type', array($type));
  }

  /**
   * 2. Deleting all searches
   */
  $batch['operations'][] = array('_batire_database_purge_delete_mongo_searches');
}

function batire_database_purge_docs(&$batch) {
  /**
   * 1. Deleting documents statistics
   */

  //@todo: when have it - do that

  /**
   * 2. Deleting all data from the following tables:
   */
  $tables = array(
    'history',
    'batire_xml_parse_archives',
    'batire_xml_parse_generation_queue',
  );

  $batch['operations'][] = array('_batire_database_purge_truncate_tables', array($tables));

  /**
   * 3. Deleting documents
   */
  $types = array(
    'batire_actualite',
    'batire_codes',
    'batire_complement_technique',
    'batire_document_pratique',
    'batire_feuillet_mobile',
    'batire_livres',
    'batire_texte_normatifs',
    'batire_texte_officiel',
  );

  foreach ($types as $type) {
    $batch['operations'][] = array('_batire_database_purge_delete_node_by_type', array($type));
  }

  /**
   * 4. Deleting all documents related CCK fields tables:
   */
  $cck_fields_tables = array(
    'content_field_release_date',
    'content_field_release_num',
    'content_field_subtitle',
    'content_field_surtitle',
    'content_field_authors',
    'content_field_illustrators',
    'content_field_date_vide',
    'content_field_juri_date',
    'content_field_juri_status',
    'content_field_collection',
    'content_field_section_title',
    'content_field_part_title',
    'content_field_doc_number',
    'content_field_resume',
    'content_field_other_parts',
  );

  $batch['operations'][] = array('_batire_database_purge_truncate_tables', array($cck_fields_tables));
}

function _batire_database_purge_delete_node_by_type($type, &$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_node'] = 0;
    $context['sandbox']['max'] = db_result(db_query("SELECT COUNT(nid) FROM {node} WHERE type = '%s'", $type));
  }

  $limit = BATIRE_DATABASE_PURGE_NODES_AT_A_TIME;

  $sql = "SELECT nid FROM {node} WHERE nid > %d AND type = '%s' ORDER BY nid ASC";

  $result = db_query_range(
    $sql,
    $context['sandbox']['current_node'],
    $type,
    0,
    $limit
  );

  while ($row = db_fetch_object($result)) {
    $flag = _batire_database_purge_node_delete($row->nid);
    /**
     * Removing messages, as it will be a lot of;
     */
    drupal_get_messages();

    // Store some result for post-processing in the finished callback.
    $context['results'][] = $flag ?
      t('Node !nid deleted successfully', array('!nid' => $row->nid)) :
      t('Error while deleting !nid', array('!nid' => $row->nid));

    // Update our progress information.
    $context['sandbox']['progress']++;
    $context['sandbox']['current_node'] = $row->nid;
    $context['message'] = t('Now processing !type:!node', array('!node' => $row->nid, '!type' => $type));
  }

  // Inform the batch engine that we are not finished,
  // and provide an estimation of the completion level we reached.
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

function _batire_database_purge_delete_mongo_searches(&$context) {
  $context['message'] = t('Deleting searches from MongoDB.');
  mongodb_delete(MONGODB_SEARCH_COLLECTION);
  mongodb_ensure_index(MONGODB_SEARCH_COLLECTION, 'sid');
  mongodb_ensure_index(MONGODB_SEARCH_COLLECTION, 'uid');
}

/**
 * Truncates all given tables
 * @param $tables
 */
function _batire_database_purge_truncate_tables($tables, &$context) {
  $context['message'] = t('Purging tables.');
  foreach ($tables as $table) {
    db_query("TRUNCATE TABLE {$table}");
  }
}

/**
 * Same as node_delete() but without logging
 * @param $nid
 */
function _batire_database_purge_node_delete($nid) {
  // Clear the cache before the load, so if multiple nodes are deleted, the
  // memory will not fill up with nodes (possibly) already removed.
  $node = node_load($nid, NULL, TRUE);

  if (node_access('delete', $node)) {
    db_query('DELETE FROM {node} WHERE nid = %d', $node->nid);
    db_query('DELETE FROM {node_revisions} WHERE nid = %d', $node->nid);
    db_query('DELETE FROM {node_access} WHERE nid = %d', $node->nid);

    // Call the node-specific callback (if any):
    node_invoke($node, 'delete');
    node_invoke_nodeapi($node, 'delete');
  }
}